{"version":3,"sources":["components/Button/Button.module.css","components/Button/Button.tsx","bll/reducers.ts","components/Counter/Counter.tsx","components/Settings/Settings.tsx","App.tsx","bll/store.ts","reportWebVitals.ts","index.tsx","components/Counter/Counter.module.css","components/Settings/Settings.module.css"],"names":["module","exports","ButtonComponent","props","className","s","buttons","buttonClass","onClick","onClickFunction","disabled","disabledCondition","name","initialState","value","minValue","maxValue","addValueToCounterAC","type","Counter","dispatch","useDispatch","finalErrorMessageClass","error","message","counter","valueWrapper","length","fullCounter","buttonsWrapper","Button","incrementButton","increment","setIsSettingsOpen","Settings","maxValueInputFinalClass","minValueInputFinalClass","isSetButtonDisabled","wrapper","inputsBlock","onChange","e","currentTarget","setError","setMaxValueAC","setMinValueAC","buttonWrapper","App","preloadedState","counter1","useSelector","state","counterValues","useState","isSettingsOpen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","persistedState","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,QAAU,0B,qKCsBbC,MAZf,SAAyBC,GACrB,OACI,wBACIC,UAAS,UAAKC,IAAEC,QAAP,YAAkBH,EAAMI,aACjCC,QAASL,EAAMM,gBACfC,SAAUP,EAAMQ,kBAHpB,SAKKR,EAAMS,Q,8BClBbC,EAAe,CACjBC,MAAO,EACPC,SAAU,EACVC,SAAU,GAkCDC,EAAsB,SAACH,GAChC,MAAQ,CACJI,KAAM,uBACNJ,UCkBOK,MA1Cf,SAAiBhB,GACb,IAAMiB,EAAWC,cAEXC,EAAyC,yCAAhBnB,EAAMoB,MAC/BlB,IAAEmB,QACFnB,IAAEkB,MAER,OACI,sBAAKnB,UAAWC,IAAEoB,QAAlB,UACI,qBAAKrB,UAAWC,IAAEqB,aAAlB,SACKvB,EAAMoB,MAAMI,OAAS,EAChB,mBAAGvB,UAAWkB,EAAd,SAAuCnB,EAAMoB,QAC7C,sBAAMnB,UAAWD,EAAMsB,SAAWtB,EAAMa,SAAvB,UAAqCX,IAAEuB,aAAgB,GAAxE,SAA6EzB,EAAMsB,YAG7F,sBAAKrB,UAAWC,IAAEwB,eAAlB,UACI,cAACC,EAAD,CACIlB,KAAK,YACLL,YAAaF,IAAE0B,gBACftB,gBAAiBN,EAAM6B,UACvBrB,kBAAmBR,EAAMsB,SAAWtB,EAAMa,UACvCb,EAAMoB,MAAMI,OAAS,IAE5B,cAACG,EAAD,CACIlB,KAAK,QACLL,YAAY,cACZE,gBAAiB,kBAAMW,EAASH,EAAoBd,EAAMY,YAC1DJ,kBAAmBR,EAAMsB,SAAWtB,EAAMY,UACvCZ,EAAMoB,MAAMI,OAAS,IAE5B,cAACG,EAAD,CACIlB,KAAK,MAELH,gBAAiB,kBAAMN,EAAM8B,mBAAkB,a,gBCqDpDC,MAhFf,SAAkB/B,GAEd,IAAMiB,EAAWC,cAsCXc,EAA0BhC,EAAMa,UAAYb,EAAMY,SAClDV,IAAEkB,MACF,GACAa,EAA0BjC,EAAMY,SAAW,GAAKZ,EAAMY,UAAYZ,EAAMa,SACxEX,IAAEkB,MACF,GACAc,EAA+BlC,EAAMa,UAAYb,EAAMY,UAAYZ,EAAMY,SAAW,EAE1F,OACI,sBAAKX,UAAWC,IAAEiC,QAAlB,UACI,sBAAKlC,UAAWC,IAAEkC,YAAlB,UACI,gCACI,0CACA,uBACInC,UAAW+B,EACXjB,KAAK,SACLJ,MAAOX,EAAMa,SACbwB,SAnCY,SAACC,GAC7B,IAAMzB,GAAYyB,EAAEC,cAAc5B,MAC9BE,GAAYb,EAAMY,SAClBZ,EAAMwC,SAAS,qBAEfxC,EAAMwC,SAAS,wCAEnBvB,EFEqB,SAACJ,GAC1B,MAAQ,CACJE,KAAM,gBACNF,YELS4B,CAAc5B,UA8Bf,gCACI,4CACA,uBACIZ,UAAWgC,EACXlB,KAAK,SACLJ,MAAOX,EAAMY,SACbyB,SAxDY,SAACC,GAC7B,IAAM1B,GAAY0B,EAAEC,cAAc5B,MAC9BC,EAAW,GAEJA,GAAYZ,EAAMa,SADzBb,EAAMwC,SAAS,qBAKfxC,EAAMwC,SAAS,wCAEnBvB,EFIqB,SAACL,GAC1B,MAAQ,CACJG,KAAM,gBACNH,YEPS8B,CAAc9B,aAkDnB,qBAAKX,UAAWC,IAAEyC,cAAlB,SACI,cAAChB,EAAD,CACIlB,KAAK,MACLH,gBAxCO,WAEnBW,EAASH,EAAoBd,EAAMY,WACnCZ,EAAMwC,SAAS,IAEfxC,EAAM8B,mBAAkB,IAoCZtB,kBAAmB0B,UCpCxBU,ICpDXC,EDoDWD,EAlDf,WACI,IAAM3B,EAAWC,cACX4B,EAAWC,aAAkC,SAAAC,GAAK,OAAIA,EAAMC,cAActC,SAC1EC,EAAWmC,aAAkC,SAAAC,GAAK,OAAIA,EAAMC,cAAcrC,YAC1EC,EAAWkC,aAAkC,SAAAC,GAAK,OAAIA,EAAMC,cAAcpC,YAJrE,EAMiCqC,oBAAS,GAN1C,mBAMJC,EANI,KAMYrB,EANZ,OAOeoB,mBACtB,wCARO,mBAOJ9B,EAPI,KAOGoB,EAPH,KAsBX,OACI,qBAAKvC,UAAU,MAAf,SACKkD,EACK,cAAC,EAAD,CACErB,kBAAmBA,EACnBlB,SAAUA,EACVC,SAAUA,EAIVO,MAAOA,EACPoB,SAAUA,IAEZ,cAAC,EAAD,CACE5B,SAAUA,EACVC,SAAUA,EACVS,QAASwB,EAEThB,kBAAmBA,EACnBD,UA5BU,WACtBZ,EAASH,EAAoBgC,EAAW,KA4B5B1B,MAAOA,OErCZgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QDNRQ,EAAcC,YAAgB,CAChCb,cJU0B,WAAiG,IAAhGD,EAA+F,uDAArEtC,EAAcqD,EAAuD,uCAC1H,OAAQA,EAAOhD,MACX,IAAK,uBACD,OAAO,2BACAiC,GADP,IAEIrC,MAAOoD,EAAOpD,QAEtB,IAAK,gBACD,OAAO,2BACAqC,GADP,IAEIpC,SAAUmD,EAAOnD,WAEzB,IAAK,gBACD,OAAO,2BACAoC,GADP,IAEInC,SAAUkD,EAAOlD,WAEzB,QACI,OAAOmC,MIxBbgB,EAAiBC,aAAaC,QAAQ,aACxCF,IACAnB,EAAiBsB,KAAKC,MAAMJ,IAGzB,IAAMK,EAAQC,YAAYT,EAAahB,GAE9CwB,EAAME,WAAU,WACZN,aAAaO,QAAQ,YAAaL,KAAKM,UAAUJ,EAAMK,gBEA3DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SAAwB,cAAC,EAAD,QAE1BS,SAASC,eAAe,SAM1B3B,K,kBCzBAvD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,YAAc,6BAA6B,eAAiB,gCAAgC,QAAU,yBAAyB,MAAQ,yB,kBCAzOD,EAAOC,QAAU,CAAC,QAAU,0BAA0B,YAAc,8BAA8B,cAAgB,gCAAgC,MAAQ,2B","file":"static/js/main.78a6ce89.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Button_buttons__1bFuQ\"};","import React from \"react\";\r\nimport s from './Button.module.css'\r\n\r\n\r\ntype PropsType = {\r\n    name: string\r\n    buttonClass?: string\r\n    onClickFunction: () => void\r\n    disabledCondition?: boolean\r\n}\r\n\r\nfunction ButtonComponent(props: PropsType) {\r\n    return (\r\n        <button\r\n            className={`${s.buttons} ${props.buttonClass}`}\r\n            onClick={props.onClickFunction}\r\n            disabled={props.disabledCondition}\r\n        >\r\n            {props.name}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ButtonComponent","const initialState = {\r\n    value: 0,\r\n    minValue: 0,\r\n    maxValue: 5\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\ntype CounterReducerActionType =\r\n    AddValueToCounterType\r\n    | SetMinValueActionType\r\n    | SetMaxValueActionType\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: CounterReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-VALUE-TO-COUNTER\":\r\n            return {\r\n                ...state,\r\n                value: action.value\r\n            }\r\n        case \"SET-MIN-VALUE\":\r\n            return {\r\n                ...state,\r\n                minValue: action.minValue\r\n            }\r\n        case \"SET-MAX-VALUE\":\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type AddValueToCounterType = ReturnType<typeof addValueToCounterAC>;\r\nexport const addValueToCounterAC = (value: number) => {\r\n    return ({\r\n        type: \"ADD-VALUE-TO-COUNTER\",\r\n        value\r\n    } as const)\r\n}\r\n\r\nexport type SetMinValueActionType = ReturnType<typeof setMinValueAC>;\r\nexport const setMinValueAC = (minValue: number) => {\r\n    return ({\r\n        type: \"SET-MIN-VALUE\",\r\n        minValue\r\n    } as const)\r\n}\r\n\r\nexport type SetMaxValueActionType = ReturnType<typeof setMaxValueAC>;\r\nexport const setMaxValueAC = (maxValue: number) => {\r\n    return ({\r\n        type: \"SET-MAX-VALUE\",\r\n        maxValue\r\n    } as const)\r\n}\r\n","import React from 'react';\r\nimport ButtonComponent from '../Button/Button';\r\nimport s from './Counter.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addValueToCounterAC} from \"../../bll/reducers\";\r\n\r\ntype PropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    counter: number\r\n    increment: () => void\r\n    // setCounter: (value: number) => void\r\n    setIsSettingsOpen: (value: boolean) => void\r\n    error: string\r\n}\r\n\r\nfunction Counter(props: PropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    const finalErrorMessageClass = props.error === 'Enter min and max value. Press \"Set\"'\r\n        ? s.message\r\n        : s.error\r\n\r\n    return (\r\n        <div className={s.counter}>\r\n            <div className={s.valueWrapper}>\r\n                {props.error.length > 0\r\n                    ? <p className={finalErrorMessageClass}>{props.error}</p>\r\n                    : <span className={props.counter >= props.maxValue ? `${s.fullCounter}` : \"\"}>{props.counter}</span>\r\n                }\r\n            </div>\r\n            <div className={s.buttonsWrapper}>\r\n                <ButtonComponent\r\n                    name=\"Increment\"\r\n                    buttonClass={s.incrementButton}\r\n                    onClickFunction={props.increment}\r\n                    disabledCondition={props.counter >= props.maxValue\r\n                    || props.error.length > 0}\r\n                />\r\n                <ButtonComponent\r\n                    name=\"Reset\"\r\n                    buttonClass=\"resetButton\"\r\n                    onClickFunction={() => dispatch(addValueToCounterAC(props.minValue))}\r\n                    disabledCondition={props.counter <= props.minValue\r\n                    || props.error.length > 0}\r\n                />\r\n                <ButtonComponent\r\n                    name=\"Set\"\r\n                    // buttonClass=\"resetButton\"\r\n                    onClickFunction={() => props.setIsSettingsOpen(true)}\r\n                    // disabledCondition={props.counter <= props.minValue\r\n                    // || props.error.length > 0}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter","import React, {ChangeEvent} from 'react';\r\nimport ButtonComponent from '../Button/Button';\r\nimport s from './Settings.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addValueToCounterAC, setMaxValueAC, setMinValueAC} from '../../bll/reducers';\r\n\r\ntype PropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    setIsSettingsOpen: (value: boolean) => void\r\n    // setMinValue: (value: number) => void\r\n    // setMaxValue: (value: number) => void\r\n    // setCounter: (value: number) => void\r\n    error: string\r\n    setError: (value: string) => void\r\n}\r\n\r\nexport type StateType = {\r\n    min: number\r\n    max: number\r\n}\r\n\r\nfunction Settings(props: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    // function saveState<T>(key: string, state: T) {\r\n    //     const stateAsString = JSON.stringify(state)\r\n    //     localStorage.setItem(key, stateAsString)\r\n    // }\r\n\r\n    const onChangeMinValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const minValue = +e.currentTarget.value\r\n        if (minValue < 0) {\r\n            props.setError('Enter valid value')\r\n        } else if (minValue >= props.maxValue) {\r\n            props.setError('Enter valid value')\r\n        }\r\n        else {\r\n            props.setError('Enter min and max value. Press \"Set\"')\r\n        }\r\n        dispatch(setMinValueAC(minValue))\r\n    }\r\n\r\n    const onChangeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const maxValue = +e.currentTarget.value\r\n        if (maxValue <= props.minValue) {\r\n            props.setError('Enter valid value')\r\n        } else {\r\n            props.setError('Enter min and max value. Press \"Set\"')\r\n        }\r\n        dispatch(setMaxValueAC(maxValue))\r\n    }\r\n\r\n    const setMinMaxValue = () => {\r\n        // props.setCounter(props.minValue)\r\n        dispatch(addValueToCounterAC(props.minValue))\r\n        props.setError('')\r\n        // saveState<StateType>('minMaxValues', {min: props.minValue, max: props.maxValue})\r\n        props.setIsSettingsOpen(false)\r\n    }\r\n\r\n    const maxValueInputFinalClass = props.maxValue <= props.minValue\r\n        ? s.error\r\n        : ''\r\n    const minValueInputFinalClass = props.minValue < 0 || props.minValue >= props.maxValue\r\n        ? s.error\r\n        : ''\r\n    const isSetButtonDisabled: boolean = props.maxValue <= props.minValue || props.minValue < 0\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.inputsBlock}>\r\n                <div>\r\n                    <p>max value</p>\r\n                    <input\r\n                        className={maxValueInputFinalClass}\r\n                        type=\"number\"\r\n                        value={props.maxValue}\r\n                        onChange={onChangeMaxValueHandler}/>\r\n                </div>\r\n                <div>\r\n                    <p>start value</p>\r\n                    <input\r\n                        className={minValueInputFinalClass}\r\n                        type=\"number\"\r\n                        value={props.minValue}\r\n                        onChange={onChangeMinValueHandler}/>\r\n                </div>\r\n\r\n            </div>\r\n            <div className={s.buttonWrapper}>\r\n                <ButtonComponent\r\n                    name=\"Set\"\r\n                    onClickFunction={setMinMaxValue}\r\n                    disabledCondition={isSetButtonDisabled}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import React, {useState} from 'react';\nimport './App.css';\nimport Counter from './components/Counter/Counter';\nimport Settings from \"./components/Settings/Settings\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./bll/store\";\nimport {addValueToCounterAC} from \"./bll/reducers\";\n\n\nfunction App() {\n    const dispatch = useDispatch()\n    const counter1 = useSelector<AppStateType, number>(state => state.counterValues.value)\n    const minValue = useSelector<AppStateType, number>(state => state.counterValues.minValue)\n    const maxValue = useSelector<AppStateType, number>(state => state.counterValues.maxValue)\n\n    const [isSettingsOpen, setIsSettingsOpen] = useState(false)\n    const [error, setError] = useState(\n        'Enter min and max value. Press \"Set\"')\n\n\n\n\n    const incrementFunction = () => {\n        dispatch(addValueToCounterAC(counter1 + 1))\n        // if (counter >= maxValue) {\n        //     setMaxValue(maxValue)\n        // } else {\n        //     setCounter(prev => prev + 1)\n        // }\n    }\n\n    return (\n        <div className=\"App\">\n            {isSettingsOpen\n                ? <Settings\n                    setIsSettingsOpen={setIsSettingsOpen}\n                    minValue={minValue}\n                    maxValue={maxValue}\n                    // setMinValue={setMinValue}\n                    // setMaxValue={setMaxValue}\n                    // setCounter={setCounter}\n                    error={error}\n                    setError={setError}\n                />\n                : <Counter\n                    minValue={minValue}\n                    maxValue={maxValue}\n                    counter={counter1}\n                    // setCounter={setCounter}\n                    setIsSettingsOpen={setIsSettingsOpen}\n                    increment={incrementFunction}\n                    error={error}\n                />}\n\n\n        </div>\n    );\n}\n\nexport default App;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./reducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counterValues: counterReducer\r\n})\r\n\r\nlet preloadedState\r\nconst persistedState = localStorage.getItem('app-state')\r\nif (persistedState) {\r\n    preloadedState = JSON.parse(persistedState)\r\n}\r\n\r\nexport const store = createStore(rootReducer, preloadedState)\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem('app-state', JSON.stringify(store.getState()))\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './bll/store';\n\n// function restoreState<T>(key: string, defaultState: T) {\n//     let state = defaultState\n//     const stateAsString = localStorage.getItem(key)\n//     if (stateAsString !== null) state = JSON.parse(stateAsString) as T\n//     return state\n// }\n// const state: StateType = restoreState<StateType>('minMaxValues', {min: 0, max: 5})\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}><App/></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__1Bdsh\",\"valueWrapper\":\"Counter_valueWrapper__gD5j2\",\"fullCounter\":\"Counter_fullCounter__2kcgz\",\"buttonsWrapper\":\"Counter_buttonsWrapper__12HCs\",\"message\":\"Counter_message__1V1E_\",\"error\":\"Counter_error__1xuVG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Settings_wrapper__u0x9J\",\"inputsBlock\":\"Settings_inputsBlock__1fvP6\",\"buttonWrapper\":\"Settings_buttonWrapper__1Cjv2\",\"error\":\"Settings_error__3tuAT\"};"],"sourceRoot":""}